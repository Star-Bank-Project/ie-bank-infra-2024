name: ie-bank-infra

on:
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab
  pull_request:
      branches:
        - main
  push:
      branches:
        - '*'
      paths-ignore:
        - 'scripts/**'

env:
  RESOURCE_GROUP_DEV: BCSAI2024-DEVOPS-STUDENTS-B-DEV
  RESOURCE_GROUP_UAT: BCSAI2024-DEVOPS-STUDENTS-B-UAT
  SUBSCRIPTION_ID_DEV: e0b9cada-61bc-4b5a-bd7a-52c606726b3b
  USER_ALIAS: makenna
  CONTAINER_REGISTRY_NAME_DEV: makennaacrdev
  CONTAINER_REGISTRY_NAME_UAT: makennaacruat
  KEY_VAULT_NAME_DEV: makenna-keyvault-dev
  KEY_VAULT_NAME_UAT: makenna-keyvault-uat

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python for linting and testing
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint with Flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics \
          && flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # - name: Test with pytest
      #   run: |
      #     pip install pytest
      #     python -m pytest --cov=bank_api -v

      # Log in to Azure - deploy container into Azure container registry 
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} #comes from Github secrets 

      # Retrieve ACR credentials from Azure Key Vault 
      - name: Get Docker registry credentials from Azure Key Vault
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "DOCKER_REGISTRY_SERVER_URL=$(az acr show --name ${{ env.CONTAINER_REGISTRY_NAME_DEV }} --query loginServer -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name acrAdminUsername --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name acrAdminPassword0 --vault-name ${{ env.KEY_VAULT_NAME_DEV }} --query value -o tsv)" >> $GITHUB_ENV


      # Log in to Docker Registry
      - name: Login to Docker Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.DOCKER_REGISTRY_SERVER_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      # Set image version
      - name: Set image version
        id: image-version
        run: echo "version=$(date +'%Y.%m.%d.%H.%M')" >> $GITHUB_OUTPUT

      # Build and push Docker image to ACR
      - name: Build and push image
        run: |
          docker build . -t ${{ env.DOCKER_REGISTRY_SERVER_URL }}/my-container-image:${{ steps.image-version.outputs.version }}
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL }}/my-container-image:${{ steps.image-version.outputs.version }}
          docker tag ${{ env.DOCKER_REGISTRY_SERVER_URL }}/my-container-image:${{ steps.image-version.outputs.version }} ${{ env.DOCKER_REGISTRY_SERVER_URL }}/my-container-image:latest
          docker push ${{ env.DOCKER_REGISTRY_SERVER_URL }}/my-container-image:latest

  deploy-dev:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      - name: Download Bicep build artifact
        uses: actions/download-artifact@v4
        with:
          name: bicep-build

      # Log in to Azure
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy Bicep file
      - name: Deploy to dev
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_DEV }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_DEV }}
          template: ./main.bicep
          parameters: ./parameters/dev.parameters.json

  deploy-uat:
    if: github.event.pull_request.base.ref == 'main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'UAT'

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      - name: Download Bicep build artifact
        uses: actions/download-artifact@v4
        with:
          name: bicep-build

      # Log in to Azure
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Retrieve ACR credentials from Azure Key Vault for UAT
      - name: Get Docker registry credentials from Azure Key Vault
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "DOCKER_REGISTRY_SERVER_URL=$(az acr show --name ${{ env.CONTAINER_REGISTRY_NAME_UAT }} --query loginServer -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_USERNAME=$(az keyvault secret show --name acrAdminUsername --vault-name ${{ env.KEY_VAULT_NAME_UAT }} --query value -o tsv)" >> $GITHUB_ENV
            echo "REGISTRY_PASSWORD=$(az keyvault secret show --name acrAdminPassword0 --vault-name ${{ env.KEY_VAULT_NAME_UAT }} --query value -o tsv)" >> $GITHUB_ENV

      # Deploy Bicep file
      - name: Deploy to uat
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ env.SUBSCRIPTION_ID_UAT }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_UAT }}
          template: ./main.bicep
          parameters: ./parameters/uat.parameters.json
